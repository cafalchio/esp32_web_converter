void game(){
	client.println("<!DOCTYPE html>");
	client.println("<html lang='en'>");
	client.println("<head>");
	client.println("<meta charset='UTF-8'>");
	client.println("<meta http-equiv='X-UA-Compatible' content='IE=edge'>");
	client.println("<meta name='viewport' content='width=device-width, initial-scale=1.0'>");
	client.println("<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css'>");
	client.println("<meta name='description'");
	client.println("content='Play checkers with the computer for free, no sign-in required, easy to use, classic Checkers game!'>");
	client.println("<meta name='keywords' content='checkers, game, board, online'>");
	client.println("<meta name='author' content='247games LLC'>");
	client.println("<meta name='copyright' content='247 Games LLC. All Rights Reserved.'>");
	client.println("<title>Checkers Game</title>");
	client.println("</head>");
	client.println("<style>");
	client.println("body {");
	client.println("touch-action: none;");
	client.println("background-color: #333;");
	client.println("margin-top: 0;");
	client.println("margin-left: 0;");
	client.println("margin-right: 0;");
	client.println("z-index: 0;");
	client.println("}");
	client.println("#center {");
	client.println("display: block;");
	client.println("margin: auto;");
	client.println("text-align: center;");
	client.println("padding-top: 5vh;");
	client.println("}");
	client.println("/* entire game */");
	client.println("#game {");
	client.println("display: inline-grid;");
	client.println("grid-template-columns: auto auto auto auto auto auto auto auto;");
	client.println("border: 2vmin solid;");
	client.println("border-color: rgb(80, 40, 11);");
	client.println("box-shadow: 1vmin 1vmin 0.4vmin rgb(14, 8, 6);");
	client.println("aspect-ratio: auto 1 / 1;");
	client.println("-webkit-user-drag: none;");
	client.println("z-index: 1;");
	client.println("}");
	client.println("/* messages */");
	client.println("#messages {");
	client.println("display: block;");
	client.println("text-align: center;");
	client.println("font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;");
	client.println("padding-right: 75vmin;");
	client.println("margin-left: 7vmin;");
	client.println("padding-top: 2vh;");
	client.println("font-size: 3vmin;");
	client.println("color: rgb(156, 92, 45);");
	client.println("z-index: 2;");
	client.println("}");
	client.println("/* game square */");
	client.println(".square {");
	client.println("display: inline-block;");
	client.println("width: max(30px, 10vmin);");
	client.println("aspect-ratio: auto 1 / 1;");
	client.println("display: flex;");
	client.println("justify-content: center;");
	client.println("align-items: center;");
	client.println("z-index: 1;");
	client.println("}");
	client.println("/* game square hover highlight */");
	client.println(".square:hover {");
	client.println("filter: brightness(1.12);");
	client.println("}");
	client.println("/* white square */");
	client.println(".white {");
	client.println("pointer-events: none;");
	client.println("/* background-color: rgb(221, 221, 221); */");
	client.println("background-size: 100%;");
	client.println("z-index: 1;");
	client.println("}");
	client.println("/* black square */");
	client.println(".black {");
	client.println("background-color: rgb(0, 0, 0);");
	client.println("background-size: 100%;");
	client.println("z-index: 1;");
	client.println("}");
	client.println("/* all pieces */");
	client.println(".piece {");
	client.println("border-radius: 50%;");
	client.println("width: max(17px, 7.5vmin);");
	client.println("height: max(17px, 7.5vmin);");
	client.println("box-shadow: 0.8vmin 0.8vmin 0.3vmin rgb(20, 11, 7);");
	client.println("z-index: 1;");
	client.println("}");
	client.println(".piece-white {");
	client.println("background-color: rgb(167, 61, 61);");
	client.println("background-size: 100%;");
	client.println("overflow: visible;");
	client.println("opacity: 1;");
	client.println("z-index: 1;");
	client.println("}");
	client.println(".white-king {");
	client.println("background-color: rgb(167, 61, 61);");
	client.println("background-size: 100%;");
	client.println("overflow: visible;");
	client.println("opacity: 1;");
	client.println("z-index: 1;");
	client.println("}");
	client.println(".piece-black {");
	client.println("background-color: rgb(77, 114, 9);");
	client.println("background-size: 108%;");
	client.println("background-position: center;");
	client.println("overflow: visible;");
	client.println("opacity: 1;");
	client.println("z-index: 1;");
	client.println("}");
	client.println(".black-king {");
	client.println("background-color: rgb(77, 114, 9);");
	client.println("background-size: 108%;");
	client.println("background-position: center;");
	client.println("overflow: visible;");
	client.println("opacity: 1;");
	client.println("z-index: 1;");
	client.println("}");
	client.println("/* highlight piece that needs to take */");
	client.println(".highlight {");
	client.println("filter: brightness(1.23);");
	client.println("filter: saturate(1.5);");
	client.println("}");
	client.println("/* highlight square for move */");
	client.println(".black.possible {");
	client.println("background-color: rgb(167, 61, 61);");
	client.println("background-size: 100%;");
	client.println("z-index: 1;");
	client.println("}");
	client.println("/* Menu */");
	client.println(".menu {");
	client.println("margin: 0;");
	client.println("margin-left: 20vmin;");
	client.println("margin-top: 12.5vmin;");
	client.println("width: max(120px, 39.6vmin);");
	client.println("height: max(150px, 55vmin);");
	client.println("border: 2px solid rgb(255, 255, 255);");
	client.println("box-shadow: 0.8vmin 0.8vmin 1.2vmin black;");
	client.println("background-color: rgb(155, 91, 46);");
	client.println("opacity: 0.9;");
	client.println("position: absolute;");
	client.println("border-radius: 5vmin;");
	client.println("z-index: 2;");
	client.println("}");
	client.println("#close-menu {");
	client.println("margin: 0 auto;");
	client.println("margin-left: 2vmin;");
	client.println("margin-top: 1.8vmin;");
	client.println("cursor: pointer;");
	client.println("position: absolute;");
	client.println("font-size: max(15px, 2.7vmin);");
	client.println("color: rgb(255, 255, 255);");
	client.println("user-select: none;");
	client.println("text-decoration: none;");
	client.println("z-index: 3;");
	client.println("}");
	client.println("#close-menu:hover {");
	client.println("font-size: max(20px, 3vmin);");
	client.println("color: rgb(0, 0, 0);");
	client.println("}");
	client.println(".menu-hidden {");
	client.println("margin-left: 83.5vmin;");
	client.println("margin-top: -2.5vmin;");
	client.println("text-align: justify;");
	client.println("width: max(12px, 4vmin);");
	client.println("height: max(12px, 4vmin);");
	client.println("cursor: pointer;");
	client.println("position: absolute;");
	client.println("font-size: 4.5vmin;");
	client.println("color: rgb(155, 91, 46);");
	client.println("text-align: center;");
	client.println("z-index: 2;");
	client.println("}");
	client.println(".menu-item {");
	client.println("margin: 0;");
	client.println("cursor: pointer;");
	client.println("font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;");
	client.println("/* letter-spacing: 0.2rem; */");
	client.println("margin-top: 2vmin;");
	client.println("font-size: max(10px, 5vmin);");
	client.println("color: #ffffff;");
	client.println("text-shadow: 0.8vmin 0.8vmin 1.2vmin black;");
	client.println("user-select: none;");
	client.println("z-index: 2;");
	client.println("}");
	client.println(".menu-item:hover {");
	client.println("font-size: max(11px, 5vmin);");
	client.println("letter-spacing: 0.1rem;");
	client.println("}");
	client.println("#new-game {");
	client.println("/* margin-top: 7vmin; */");
	client.println("margin-top: max(35px, 7vmin);");
	client.println("}");
	client.println("#options {");
	client.println("/* margin-top: 5vmin; */");
	client.println("margin-top: max(10px, 5vmin);");
	client.println("}");
	client.println("#rules {");
	client.println("/* margin-top: 5vmin; */");
	client.println("margin-top: max(10px, 5vmin);");
	client.println("}");
	client.println("#results {");
	client.println("/* margin-top: 5vmin; */");
	client.println("margin-top: max(12px, 6vmin);");
	client.println("}");
	client.println(".submenu {");
	client.println("position: relative;");
	client.println("font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;");
	client.println("text-shadow: 0.8vmin 0.8vmin 1.2vmin black;");
	client.println("font-size: max(6px, 3.5vmin);");
	client.println("color: #ffffff;");
	client.println("user-select: none;");
	client.println("z-index: 2;");
	client.println("}");
	client.println("/* Options submenu */");
	client.println("#sound {");
	client.println("margin-top: max(15px, 10vmin);");
	client.println("}");
	client.println("#highlight {");
	client.println("margin-top: max(15px, 10vmin);");
	client.println("}");
	client.println("#back {");
	client.println("margin-top: max(15px, 10vmin);");
	client.println("cursor: pointer;");
	client.println("}");
	client.println("#back:hover {");
	client.println("font-size: max(20px, 3vmin);");
	client.println("color: rgb(0, 0, 0);");
	client.println("}");
	client.println("/* Switch from w3Schools.com */");
	client.println(".switch {");
	client.println("position: relative;");
	client.println("display: inline-block;");
	client.println("width: 6vmin;");
	client.println("height: 3.4vmin;");
	client.println("}");
	client.println("/* Hide default HTML checkbox */");
	client.println(".switch input {");
	client.println("opacity: 0;");
	client.println("width: 0;");
	client.println("height: 0;");
	client.println("}");
	client.println("/* The slider */");
	client.println(".slider {");
	client.println("position: absolute;");
	client.println("cursor: pointer;");
	client.println("top: 0;");
	client.println("left: 0;");
	client.println("right: 0;");
	client.println("bottom: 0;");
	client.println("background-color: #ccc;");
	client.println("-webkit-transition: 0.4s;");
	client.println("transition: 0.4s;");
	client.println("}");
	client.println(".slider:before {");
	client.println("position: absolute;");
	client.println("content: '';");
	client.println("height: 2.6vmin;");
	client.println("width: 2.6vmin;");
	client.println("left: 0.4vmin;");
	client.println("bottom: 0.4vmin;");
	client.println("background-color: white;");
	client.println("-webkit-transition: 0.4s;");
	client.println("transition: 0.4s;");
	client.println("}");
	client.println("input:checked + .slider {");
	client.println("background-color: #2196f3;");
	client.println("}");
	client.println("input:focus + .slider {");
	client.println("box-shadow: 0 0 1px #2196f3;");
	client.println("}");
	client.println("input:checked + .slider:before {");
	client.println("-webkit-transform: translateX(2.6vmin);");
	client.println("-ms-transform: translateX(2.6vmin);");
	client.println("transform: translateX(2.6vmin);");
	client.println("}");
	client.println("/* Rounded sliders */");
	client.println(".slider.round {");
	client.println("border-radius: 34px;");
	client.println("}");
	client.println(".slider.round:before {");
	client.println("border-radius: 50%;");
	client.println("}");
	client.println(".space {");
	client.println("margin-right: 6.1vmin;");
	client.println("}");
	client.println("/* Space between text and option sliders */");
	client.println(".space-s {");
	client.println("margin-right: 1.3vmin;");
	client.println("}");
	client.println("/* Rules window */");
	client.println(".menu-rules {");
	client.println("text-align: center;");
	client.println("text-shadow: #333 0.1em 0.1em 0.2em;");
	client.println("text-justify: inter-word;");
	client.println("user-select: none;");
	client.println("color: white;");
	client.println("overflow: scroll;");
	client.println("}");
	client.println(".rules-back {");
	client.println("position: relative;");
	client.println("margin-top: max(10px, 5vmin);");
	client.println("cursor: pointer;");
	client.println("}");
	client.println("#rules-back:hover {");
	client.println("font-size: max(20px, 3vmin);");
	client.println("color: rgb(0, 0, 0);");
	client.println("cursor: pointer;");
	client.println("}");
	client.println(".new-page:hover {");
	client.println("margin-top: max(10px, 5vmin);");
	client.println("}");
	client.println("/* rules paragraph normal */");
	client.println("p {");
	client.println("color: white;");
	client.println("font-family: 'Arial';");
	client.println("font-size: max(2.4vmin, 15px);");
	client.println("text-align: left;");
	client.println("margin-left: 10px;");
	client.println("margin-right: 10px;");
	client.println("}");
	client.println("/* rules paragraph topics */");
	client.println(".text-g {");
	client.println("font-size: max(3vmin, 18px);");
	client.println("}");
	client.println("/* Results window */");
	client.println(".results-menu {");
	client.println("text-align: center;");
	client.println("position: relative;");
	client.println("margin-top: max(10px, 5.2vmin);");
	client.println("}");
	client.println("#reset-score {");
	client.println("cursor: pointer;");
	client.println("}");
	client.println("#reset-score:hover {");
	client.println("color: black;");
	client.println("}");
	client.println("/* styles for taken pieces */");
	client.println(".piece-out-white {");
	client.println("background-color: #333;");
	client.println("background-position: center;");
	client.println("border-radius: 50%;");
	client.println("background-size: 110%;");
	client.println("width: max(10px, 5vmin);");
	client.println("height: max(10px, 5vmin);");
	client.println("box-shadow: none;");
	client.println("margin-top: 20%;");
	client.println("z-index: 3;");
	client.println("}");
	client.println(".piece-out-black {");
	client.println("background-color: #333;");
	client.println("background-position: center;");
	client.println("border-radius: 50%;");
	client.println("background-size: 120%;");
	client.println("width: max(10px, 5vmin);");
	client.println("height: max(10px, 5vmin);");
	client.println("box-shadow: none;");
	client.println("margin-top: 20%;");
	client.println("z-index: 3;");
	client.println("}");
	client.println("#removedw {");
	client.println("display: inline;");
	client.println("width: 4.8vmin;");
	client.println("display: inline-grid;");
	client.println("position: relative;");
	client.println("}");
	client.println("#removedb {");
	client.println("display: inline;");
	client.println("position: relative;");
	client.println("width: 4.8vmin;");
	client.println("display: inline-grid;");
	client.println("}");
	client.println("/<style>");
	client.println("<script>");
	client.println("//Board class that create and command the game");
	client.println("/*jshint esversion: 6 */");
	client.println("class Board {");
	client.println("// Method to create the board");
	client.println("constructor() {");
	client.println("this.game = document.getElementById('game');");
	client.println("this.colorPlay = 'piece-white';");
	client.println("this.whiteKing = false;");
	client.println("this.blackKing = false;");
	client.println("this.needTake = []; // save pieces that need to take");
	client.println("// takeIt info to take a piece: actualPieceId, enemySquareId, opositeSquareId");
	client.println("this.takeIt = [];");
	client.println("this.pieceTaking = null; //keeps the piece that is taking");
	client.println("this.moveSound = new Audio('assets/audio/move.mp3');");
	client.println("this.takeSound = new Audio('assets/audio/capture.mp3');");
	client.println("this.menu = new Audio('assets/audio/menu.mp3');");
	client.println("this.turn = 0;");
	client.println("this.optionHighlight = true;");
	client.println("this.optionSound = true;");
	client.println("this.menuIsOpen = true;");
	client.println("this.isPlaying = false;");
	client.println("// prepare for score saving");
	client.println("if (localStorage.getItem('whiteScore') == null) {");
	client.println("localStorage.setItem('whiteScore', '0');");
	client.println("}");
	client.println("if (localStorage.getItem('blackScore') == null) {");
	client.println("localStorage.setItem('blackScore', '0');");
	client.println("}");
	client.println("// create squares");
	client.println("let color = 'white';");
	client.println("for (let i = 0; i < 64; i++) {");
	client.println("color = color == 'black' ? 'white' : 'black';");
	client.println("if (i % 8 == 0) {");
	client.println("color = color == 'black' ? 'white' : 'black'; // invert the color to the next row");
	client.println("}");
	client.println("const newDiv = document.createElement('div');");
	client.println("newDiv.className = 'square';");
	client.println("newDiv.classList.add(color);");
	client.println("newDiv.id = i;");
	client.println("newDiv.setAttribute('occupied', 'false');");
	client.println("this.game.appendChild(newDiv);");
	client.println("}");
	client.println("}");
	client.println("// Method to start the game");
	client.println("startGame() {");
	client.println("/* Start the game*/");
	client.println("this.createPieces();");
	client.println("this.removeMoving();");
	client.println("this.gameControl();");
	client.println("}");
	client.println("// Method to control the game turns");
	client.println("gameControl() {");
	client.println("/* Method to control the game turns*/");
	client.println("this.turn += 1;");
	client.println("if (this.colorPlay == 'piece-white') {");
	client.println("const message = document.getElementById('messages');");
	client.println("message.innerHTML = 'White's turn';");
	client.println("// check if white pieces can take");
	client.println("// freeze black pieces");
	client.println("let blackPieces = document.querySelectorAll('.piece-black');");
	client.println("blackPieces.forEach((item) => {");
	client.println("item.movable = false;");
	client.println("item.addEventListener('click', this.pieceClick);");
	client.println("});");
	client.println("this.promoteToKing(blackPieces);");
	client.println("setTimeout(() => {");
	client.println("this.checkWinner();");
	client.println("}, 1000);");
	client.println("// check if white pieces can take");
	client.println("let whitePieces = document.querySelectorAll('.piece-white');");
	client.println("if (!this.checkIfcanTake(whitePieces)) {");
	client.println("// unfreeze white pieces");
	client.println("whitePieces.forEach((item) => {");
	client.println("item.movable = true;");
	client.println("item.addEventListener('click', this.pieceClick);");
	client.println("this.checkpossibleMove(item);");
	client.println("});");
	client.println("}");
	client.println("} else if (this.colorPlay == 'piece-black') {");
	client.println("const message = document.getElementById('messages');");
	client.println("message.innerHTML = '';");
	client.println("// remove highlight from white pieces");
	client.println("let highlightPieces = document.querySelectorAll('.highlight');");
	client.println("highlightPieces.forEach((item) => {");
	client.println("item.classList.remove('highlight');");
	client.println("});");
	client.println("//freeze white pieces");
	client.println("const whitePieces = document.querySelectorAll('.piece-white');");
	client.println("whitePieces.forEach((item) => {");
	client.println("item.movable = false;");
	client.println("});");
	client.println("this.promoteToKing(whitePieces);");
	client.println("setTimeout(() => {");
	client.println("this.checkWinner();");
	client.println("}, 1000);");
	client.println("const blackPieces = document.querySelectorAll('.piece-black');");
	client.println("blackPieces.forEach((item) => {");
	client.println("item.movable = false;");
	client.println("this.checkpossibleMove(item);");
	client.println("});");
	client.println("//random to computer move, sound more");
	client.println("let timeMove = Math.random() * 2000 + 1200;");
	client.println("setTimeout(board.computerMove, timeMove);");
	client.println("}");
	client.println("board.pieceTaking = null;");
	client.println("}");
	client.println("// Method to create pieces");
	client.println("createPieces() {");
	client.println("/* Create the pieces on the board*/");
	client.println("const blackPieces = [1, 3, 5, 7, 8, 10, 12, 14, 17, 19, 21, 23];");
	client.println("const whitePieces = [40, 42, 44, 46, 49, 51, 53, 55, 56, 58, 60, 62];");
	client.println("// get squares");
	client.println("const squares = document.querySelectorAll('.square');");
	client.println("// create pieces");
	client.println("for (let i = 0; i < 64; i++) {");
	client.println("const bPiece = new Piece('black');");
	client.println("const wPiece = new Piece('white');");
	client.println("if (blackPieces.includes(i)) {");
	client.println("squares[i].appendChild(bPiece.get_piece(100 + i));");
	client.println("squares[i].setAttribute('occupied', 'true');");
	client.println("}");
	client.println("if (whitePieces.includes(i)) {");
	client.println("squares[i].appendChild(wPiece.get_piece(200 + i));");
	client.println("squares[i].setAttribute('occupied', 'true');");
	client.println("}");
	client.println("}");
	client.println("}");
	client.println("// Method to avoid bug of piece being moved to another square");
	client.println("removeMoving() {");
	client.println("document.addEventListener('movestart', (event) => {");
	client.println("event.preventDefault();");
	client.println("const oldPossibleMoves = document.querySelectorAll('.possible');");
	client.println("if (oldPossibleMoves.length > 0) {");
	client.println("oldPossibleMoves.forEach((item) => {");
	client.println("item.classList.remove('possible');");
	client.println("});");
	client.println("}");
	client.println("});");
	client.println("}");
	client.println("// Method to add click event listeners");
	client.println("pieceClick(e) {");
	client.println("/* Method to add click event listeners to the pieces*/");
	client.println("const moving = document.querySelectorAll('.moving');");
	client.println("moving.forEach((item) => {");
	client.println("item.classList.remove('moving');");
	client.println("});");
	client.println("const oldPossibleMoves = document.querySelectorAll('.possible');");
	client.println("if (oldPossibleMoves.length > 0) {");
	client.println("oldPossibleMoves.forEach((item) => {");
	client.println("item.classList.remove('possible');");
	client.println("});");
	client.println("}");
	client.println("if (e.target.classList[0] == 'piece' && e.target.movable) {");
	client.println("e.target.classList.add('moving');");
	client.println("// check for possible moves");
	client.println("const possibleMove = board.checkpossibleMove(e.target);");
	client.println("if (possibleMove.length > 0) {");
	client.println("possibleMove.forEach((item) => {");
	client.println("const square = document.getElementById(item);");
	client.println("square.classList.add('possible');");
	client.println("square.addEventListener('click', board.movePiece);");
	client.println("});");
	client.println("} else {");
	client.println("e.target.classList.remove('moving');");
	client.println("}");
	client.println("} else {");
	client.println("return false;");
	client.println("}");
	client.println("}");
	client.println("// add square click to possible squares");
	client.println("movePiece(e) {");
	client.println("/* Method to move the piece to the square*/");
	client.println("if (e.target.classList[2] == 'possible') {");
	client.println("const piece = document.querySelector('.moving');");
	client.println("const square = document.getElementById(e.target.id);");
	client.println("const oldSquare = document.getElementById(piece.parentNode.id);");
	client.println("// move piece");
	client.println("square.appendChild(piece);");
	client.println("// check if took piece");
	client.println("if (board.takeIt.length > 0) {");
	client.println("for (let i = 0; i < board.takeIt.length; i++) {");
	client.println("let item = board.takeIt[i];");
	client.println("const movPiece = item[0];");
	client.println("const enemySquareId = item[1];");
	client.println("const opositeSquare = document.getElementById(item[2]);");
	client.println("if (movPiece == piece && opositeSquare == square) {");
	client.println("// remove enemy piece");
	client.println("const enemySquare = document.getElementById(enemySquareId);");
	client.println("// add piece board score");
	client.println("let whiteCapture = document.getElementById('removedw');");
	client.println("const outPiece = enemySquare.firstChild;");
	client.println("outPiece.classList.remove('piece-black');");
	client.println("outPiece.classList.add('piece-out-black');");
	client.println("whiteCapture.appendChild(outPiece);");
	client.println("// remove from board");
	client.println("enemySquare.innerHTML = '';");
	client.println("enemySquare.setAttribute('occupied', 'false');");
	client.println("// check if can take again");
	client.println("board.takeIt = [];");
	client.println("board.needTake = [];");
	client.println("//get white pieces");
	client.println("if (board.checkIfcanTake([piece])) {");
	client.println("board.needTake = [];");
	client.println("board.takeIt = [];");
	client.println("// player can take again");
	client.println("board.invertPlayerTurn();");
	client.println("break;");
	client.println("}");
	client.println("}");
	client.println("}");
	client.println("}");
	client.println("piece.classList.remove('moving');");
	client.println("// remove possible class");
	client.println("const dragSquares = document.querySelectorAll('.possible');");
	client.println("dragSquares.forEach((item) => {");
	client.println("item.classList.remove('possible');");
	client.println("});");
	client.println("// remove occupied from old square");
	client.println("oldSquare.setAttribute('occupied', 'false');");
	client.println("square.setAttribute('occupied', 'true');");
	client.println("board.invertPlayerTurn();");
	client.println("this.pieceTaking = null;");
	client.println("board.gameControl();");
	client.println("}");
	client.println("}");
	client.println("// Method to move the black piece automatically and take if possible");
	client.println("computerMove() {");
	client.println("/* Method to move the black piece automatically and take if possible*/");
	client.println("board.takeIt = [];");
	client.println("board.needTake = [];");
	client.println("let whiteCounter = 0;");
	client.println("// get all black pieces");
	client.println("const blackPieces = document.querySelectorAll('.piece-black');");
	client.println("// check if black pieces can take");
	client.println("if (board.checkIfcanTake(blackPieces)) {");
	client.println("while (board.checkIfcanTake(blackPieces) || whiteCounter > 5) {");
	client.println("// take a piece");
	client.println("board.takePiece();");
	client.println("board.takeIt = [];");
	client.println("board.needTake = [];");
	client.println("whiteCounter++;");
	client.println("}");
	client.println("} else {");
	client.println("// move a piece");
	client.println("board.moveComputerPiece();");
	client.println("}");
	client.println("this.pieceTaking = null;");
	client.println("board.invertPlayerTurn();");
	client.println("board.gameControl();");
	client.println("}");
	client.println("// take a piece");
	client.println("takePiece() {");
	client.println("/* Method to take a piece */");
	client.println("let group;");
	client.println("let piece;");
	client.println("let enemySquare;");
	client.println("let oppositeSquare;");
	client.println("// if it is retaking");
	client.println("if (board.pieceTaking != null) {");
	client.println("for (let i = 0; i < board.takeIt.length; i++) {");
	client.println("group = board.takeIt[i];");
	client.println("if (group[0] == this.pieceTaking) {");
	client.println("piece = group[0];");
	client.println("enemySquare = document.getElementById(group[1]);");
	client.println("oppositeSquare = document.getElementById(group[2]);");
	client.println("piece.parentNode.innerHTML = '';");
	client.println("oppositeSquare.appendChild(piece);");
	client.println("// add piece to removed");
	client.println("let blackCapture = document.getElementById('removedb');");
	client.println("const outPiece = enemySquare.firstChild;");
	client.println("outPiece.classList.remove('piece-white');");
	client.println("outPiece.classList.add('piece-out-white');");
	client.println("blackCapture.appendChild(outPiece);");
	client.println("// remove from board");
	client.println("enemySquare.innerHTML = '';");
	client.println("enemySquare.setAttribute('occupied', 'false');");
	client.println("oppositeSquare.setAttribute('occupied', 'true');");
	client.println("return true;");
	client.println("}");
	client.println("}");
	client.println("} else {");
	client.println("// if it is the first time");
	client.println("for (let i = 0; i < board.takeIt.length; i++) {");
	client.println("group = board.takeIt[i];");
	client.println("piece = group[0];");
	client.println("this.pieceTaking = piece;");
	client.println("enemySquare = document.getElementById(group[1]);");
	client.println("oppositeSquare = document.getElementById(group[2]);");
	client.println("// add piece to removed");
	client.println("let blackCapture = document.getElementById('removedb');");
	client.println("const outPiece = enemySquare.firstChild;");
	client.println("outPiece.classList.remove('piece-white');");
	client.println("outPiece.classList.add('piece-out-white');");
	client.println("blackCapture.appendChild(outPiece);");
	client.println("// move the piece");
	client.println("piece.parentNode.innerHTML = '';");
	client.println("oppositeSquare.appendChild(piece);");
	client.println("enemySquare.innerHTML = '';");
	client.println("enemySquare.setAttribute('occupied', 'false');");
	client.println("oppositeSquare.setAttribute('occupied', 'true');");
	client.println("return true;");
	client.println("}");
	client.println("}");
	client.println("}");
	client.println("// Method to move a piece");
	client.println("moveComputerPiece() {");
	client.println("/* Method to move a piece */");
	client.println("let allMoves = {};");
	client.println("let tempId = -1;");
	client.println("let tempMoves = [];");
	client.println("const blackPieces = document.querySelectorAll('.piece-black');");
	client.println("// check pieces that can move");
	client.println("blackPieces.forEach((item) => {");
	client.println("tempMoves = this.checkpossibleMove(item);");
	client.println("if (tempMoves.length > 0) {");
	client.println("tempId = item.id;");
	client.println("allMoves[tempId] = tempMoves;");
	client.println("}");
	client.println("});");
	client.println("const keys = Object.keys(allMoves);");
	client.println("const pieceId = keys[Math.floor(Math.random() * keys.length)]; //random piece");
	client.println("let possibleMoves = allMoves[pieceId];");
	client.println("const piece = document.getElementById(pieceId);");
	client.println("const pieceSquare = piece.parentNode;");
	client.println("// move the piece");
	client.println("const toSquareId = possibleMoves[0];");
	client.println("const toSquare = document.getElementById(toSquareId);");
	client.println("toSquare.appendChild(piece);");
	client.println("toSquare.setAttribute('occupied', 'true');");
	client.println("pieceSquare.setAttribute('occupied', 'false');");
	client.println("pieceSquare.innerHTML = '';");
	client.println("}");
	client.println("// Method to check if there is forced take for the pieces");
	client.println("checkIfcanTake(pieces) {");
	client.println("/* Check if any piece can take another");
	client.println("Input (arr(obj)): Pieces");
	client.println("Output (boolean): true if piece can take */");
	client.println("this.needTake = [];");
	client.println("pieces.forEach((item) => {");
	client.println("this.checkpossibleMove(item);");
	client.println("});");
	client.println("if (this.needTake.length > 0) {");
	client.println("this.needTake.forEach((item) => {");
	client.println("item.movable = true;");
	client.println("if (this.optionHighlight && item.classList.contains('piece-white')) {");
	client.println("item.classList.add('highlight');");
	client.println("}");
	client.println("});");
	client.println("// freeze the rest");
	client.println("pieces.forEach((item) => {");
	client.println("if (!this.needTake.includes(item)) {");
	client.println("item.movable = false;");
	client.println("}");
	client.println("});");
	client.println("return true;");
	client.println("} else {");
	client.println("return false;");
	client.println("}");
	client.println("}");
	client.println("// Promote to king");
	client.println("promoteToKing(pieces) {");
	client.println("/* Change the piece to king if it reaches the end of the board");
	client.println("Input (obj): Piece");
	client.println("*/");
	client.println("pieces.forEach((item) => {");
	client.println("if (item.classList.contains('piece-white') && item.parentNode.id < 8) {");
	client.println("item.classList.add('white-king');");
	client.println("item.isKing = true;");
	client.println("} else if (");
	client.println("item.classList.contains('piece-black') &&");
	client.println("item.parentNode.id > 55");
	client.println(") {");
	client.println("item.classList.add('black-king');");
	client.println("item.isKing = true;");
	client.println("}");
	client.println("});");
	client.println("}");
	client.println("updateScore(color) {");
	client.println("/* Update the score");
	client.println("Input (str): Color of the piece");
	client.println("*/");
	client.println("let score = localStorage.getItem(color + 'Score');");
	client.println("if (score == null) {");
	client.println("score = 0;");
	client.println("} else {");
	client.println("score = parseInt(score) + 1;");
	client.println("localStorage.setItem(color + 'Score', String(score));");
	client.println("}");
	client.println("}");
	client.println("// check winner");
	client.println("checkWinner() {");
	client.println("/* Check if there is a winner */");
	client.println("let whitePiecesLeft = 0;");
	client.println("let blackPiecesLeft = 0;");
	client.println("// No pieces left");
	client.println("const whitePieces = document.querySelectorAll('.piece-white');");
	client.println("const blackPieces = document.querySelectorAll('.piece-black');");
	client.println("whitePieces.forEach((item) => {");
	client.println("whitePiecesLeft += this.checkpossibleMove(item).length;");
	client.println("});");
	client.println("blackPieces.forEach((item) => {");
	client.println("blackPiecesLeft += this.checkpossibleMove(item).length;");
	client.println("});");
	client.println("if (whitePieces.length == 0) {");
	client.println("alert('No pieces left, Black wins!');");
	client.println("this.updateScore('black');");
	client.println("location.reload();");
	client.println("return -1;");
	client.println("} else if (blackPieces.length == 0) {");
	client.println("alert('Congratulations!!!!\n\nNo pieces left, White wins!');");
	client.println("this.updateScore('white');");
	client.println("location.reload();");
	client.println("return -1;");
	client.println("} else if (whitePiecesLeft == 0) {");
	client.println("alert('No moves left, Black wins!');");
	client.println("this.updateScore('black');");
	client.println("location.reload();");
	client.println("return -1;");
	client.println("} else if (blackPiecesLeft == 0) {");
	client.println("alert('Congratulations!!!!\n\nNo moves left, White wins!');");
	client.println("this.updateScore('white');");
	client.println("location.reload();");
	client.println("return -1;");
	client.println("}");
	client.println("}");
	client.println("// invert Player turn");
	client.println("invertPlayerTurn() {");
	client.println("/* Invert the player turn */");
	client.println("const colors = ['piece-white', 'piece-black'];");
	client.println("if (this.colorPlay == colors[0]) {");
	client.println("this.colorPlay = colors[1];");
	client.println("} else {");
	client.println("this.colorPlay = colors[0];");
	client.println("}");
	client.println("}");
	client.println("// Method to check possible targets");
	client.println("checkpossibleMove(pieceToCheck = null) {");
	client.println("/* This method will check the possible moves for the piece that is being moved");
	client.println("and will return an array with the possible squares");
	client.println("Inpunt: pieceToCheck = can be a piece or null, when null,");
	client.println("the method will check the piece that is being moved");
	client.println("Output: returns an array of possible squares or array of squares to take a piece");
	client.println("or an empty array if there is no possible move.");
	client.println("*/");
	client.println("let taking = [];");
	client.println("// left corners");
	client.println("const leftCorners = [8, 24, 40, 56];");
	client.println("// right corners");
	client.println("const rightCorners = [7, 23, 39, 55];");
	client.println("// white top corners");
	client.println("const whiteTopCorners = [1, 3, 5, 7];");
	client.println("// black top corners");
	client.println("const blackTopCorners = [56, 58, 60, 62];");
	client.println("// get piece");
	client.println("let movPiece = document.querySelector('.moving');");
	client.println("if (pieceToCheck) {");
	client.println("movPiece = pieceToCheck;");
	client.println("}");
	client.println("if (!movPiece) {");
	client.println("return false;");
	client.println("}");
	client.println("// get piece color");
	client.println("const pieceColor = movPiece.classList[1];");
	client.println("// get piece id");
	client.println("const pieceId = parseInt(movPiece.parentNode.id);");
	client.println("// get piece position");
	client.println("let possibleMoves = [];");
	client.println("// check if is a isKing");
	client.println("if (movPiece.isKing) {");
	client.println("possibleMoves.push(pieceId - 9);");
	client.println("possibleMoves.push(pieceId - 7);");
	client.println("possibleMoves.push(pieceId + 7);");
	client.println("possibleMoves.push(pieceId + 9);");
	client.println("// check for borders for King");
	client.println("if (leftCorners.includes(pieceId)) {");
	client.println("possibleMoves = possibleMoves.filter((item) => item != pieceId - 9);");
	client.println("possibleMoves = possibleMoves.filter((item) => item != pieceId + 7);");
	client.println("}");
	client.println("if (rightCorners.includes(pieceId)) {");
	client.println("possibleMoves = possibleMoves.filter((item) => item != pieceId - 7);");
	client.println("possibleMoves = possibleMoves.filter((item) => item != pieceId + 9);");
	client.println("}");
	client.println("if (whiteTopCorners.includes(pieceId)) {");
	client.println("possibleMoves = possibleMoves.filter((item) => item != pieceId - 9);");
	client.println("possibleMoves = possibleMoves.filter((item) => item != pieceId - 7);");
	client.println("}");
	client.println("if (blackTopCorners.includes(pieceId)) {");
	client.println("possibleMoves = possibleMoves.filter((item) => item != pieceId + 7);");
	client.println("possibleMoves = possibleMoves.filter((item) => item != pieceId + 9);");
	client.println("}");
	client.println("} else {");
	client.println("switch (pieceColor) {");
	client.println("case 'piece-white':");
	client.println("possibleMoves.push(pieceId - 9);");
	client.println("possibleMoves.push(pieceId - 7);");
	client.println("if (leftCorners.includes(pieceId)) {");
	client.println("possibleMoves.shift();");
	client.println("}");
	client.println("if (rightCorners.includes(pieceId)) {");
	client.println("possibleMoves.pop();");
	client.println("}");
	client.println("break;");
	client.println("case 'piece-black':");
	client.println("possibleMoves.push(pieceId + 9);");
	client.println("possibleMoves.push(pieceId + 7);");
	client.println("if (leftCorners.includes(pieceId)) {");
	client.println("possibleMoves.pop();");
	client.println("}");
	client.println("if (rightCorners.includes(pieceId)) {");
	client.println("possibleMoves.shift();");
	client.println("}");
	client.println("break;");
	client.println("}");
	client.println("}");
	client.println("// check for pieces on the way");
	client.println("if (possibleMoves.length > 0 && possibleMoves != null) {");
	client.println("for (let i = 0; i < possibleMoves.length + 1; i++) {");
	client.println("const targetSquare = document.getElementById(possibleMoves[i]);");
	client.println("try {");
	client.println("if (targetSquare != null && targetSquare.hasChildNodes()) {");
	client.println("// square has piece of same color");
	client.println("if (targetSquare.firstChild.classList[1] == pieceColor) {");
	client.println("// remove move");
	client.println("possibleMoves.splice(i, 1);");
	client.println("i--;");
	client.println("// if square has piece of different color");
	client.println("} else if (targetSquare.firstChild.classList[1] != pieceColor) {");
	client.println("// check if the next square is occupied");
	client.println("let targetSquare = this.canTake(possibleMoves[i], movPiece);");
	client.println("if (targetSquare) {");
	client.println("// send the square with the piece to take and the square to move to");
	client.println("taking.push(targetSquare);");
	client.println("}");
	client.println("possibleMoves.splice(i, 1);");
	client.println("i--;");
	client.println("}");
	client.println("}");
	client.println("} catch (err) {");
	client.println("continue;");
	client.println("}");
	client.println("// There is no position to go! (out of the board)");
	client.println("if (possibleMoves[i] < 0 || possibleMoves[i] > 63) {");
	client.println("possibleMoves.splice(i, 1);");
	client.println("i--;");
	client.println("}");
	client.println("}");
	client.println("}");
	client.println("// check if there is nan");
	client.println("if (possibleMoves.includes(NaN)) {");
	client.println("return false;");
	client.println("}");
	client.println("// check if there is a taking");
	client.println("if (taking.length > 0) {");
	client.println("return taking;");
	client.println("}");
	client.println("return possibleMoves;");
	client.println("}");
	client.println("// Method to check if the piece can take another piece");
	client.println("canTake(enemySquareId, pieceToCheck) {");
	client.println("// define corners");
	client.println("const corners = [1, 3, 5, 7, 8, 24, 40, 56, 58, 60, 62, 55, 39, 23];");
	client.println("// check if the oposite square is occupied");
	client.println("let movPiece = document.querySelector('.moving');");
	client.println("if (pieceToCheck) {");
	client.println("movPiece = pieceToCheck;");
	client.println("}");
	client.println("// test for different directions");
	client.println("const piecePositionId = parseInt(movPiece.parentNode.id);");
	client.println("// target piece position");
	client.println("if (corners.includes(enemySquareId)) {");
	client.println("return false;");
	client.println("} else {");
	client.println("let relation = enemySquareId - piecePositionId;");
	client.println("let opositeSquareId = enemySquareId + relation;");
	client.println("const opositeSquare = document.getElementById(opositeSquareId);");
	client.println("if (opositeSquare.hasChildNodes()) {");
	client.println("return false;");
	client.println("} else {");
	client.println("// movePiece : piece that need to move");
	client.println("this.needTake.push(movPiece);");
	client.println("// enemySquare : square with the piece to take");
	client.println("this.takeIt.push([movPiece, enemySquareId, opositeSquareId]);");
	client.println("return opositeSquareId;");
	client.println("}");
	client.println("}");
	client.println("}");
	client.println("}");
	client.println("// Piece class to create pieces");
	client.println("class Piece {");
	client.println("constructor(color) {");
	client.println("this.color = color;");
	client.println("this.isKing = false;");
	client.println("this.piece = document.createElement('div');");
	client.println("this.piece.className = 'piece';");
	client.println("this.piece.classList.add('piece-' + color);");
	client.println("}");
	client.println("// create a new piece");
	client.println("get_piece(id) {");
	client.println("this.piece.id = id;");
	client.println("return this.piece;");
	client.println("}");
	client.println("}");
	client.println("// Menu class");
	client.println("class Menu {");
	client.println("/* Menu class to create the menu and the buttons */");
	client.println("createMenu() {");
	client.println("/* Create menu */");
	client.println("const menu = document.createElement('div');");
	client.println("menu.id = 'menu';");
	client.println("menu.classList.add('menu');");
	client.println("menu.innerHTML = `<div id='close-menu'><i class='far fa-times-circle'></i></div>`;");
	client.println("if (board.isPlaying) {");
	client.println("menu.innerHTML += `<div class='menu-item' id='new-game'>Reset Game!</div>`;");
	client.println("} else {");
	client.println("menu.innerHTML += `<div class='menu-item' id='new-game'>Start Game!</div>`;");
	client.println("}");
	client.println("menu.innerHTML += `");
	client.println("<div class='menu-item' id='options'>Options</div>");
	client.println("<div class='menu-item' id='rules'>Rules</div>");
	client.println("<div class='menu-item' id='results'>Results</div>`;");
	client.println("board.game.appendChild(menu);");
	client.println("document.getElementById('close-menu').addEventListener('click', () => {");
	client.println("this.hiddenMenu();");
	client.println("board.menuIsOpen = false;");
	client.println("});");
	client.println("document.getElementById('new-game').addEventListener('click', () => {");
	client.println("if (board.isPlaying == true) {");
	client.println("this.hiddenMenu();");
	client.println("location.reload();");
	client.println("} else {");
	client.println("board.startGame();");
	client.println("board.isPlaying = true;");
	client.println("board.menuIsOpen = false;");
	client.println("this.hiddenMenu();");
	client.println("}");
	client.println("});");
	client.println("document.getElementById('options').addEventListener('click', () => {");
	client.println("this.options();");
	client.println("});");
	client.println("document.getElementById('rules').addEventListener('click', () => {");
	client.println("this.rules();");
	client.println("});");
	client.println("document.getElementById('results').addEventListener('click', () => {");
	client.println("this.results();");
	client.println("});");
	client.println("}");
	client.println("//Hidden menu method");
	client.println("hiddenMenu() {");
	client.println("const smallMenu = document.createElement('div');");
	client.println("smallMenu.classList.add('menu-hidden');");
	client.println("board.game.appendChild(smallMenu);");
	client.println("board.game.removeChild(document.getElementById('menu'));");
	client.println("smallMenu.innerHTML = `<i class='fa fa-cog' aria-hidden='true'></i>`;");
	client.println("smallMenu.addEventListener('click', () => {");
	client.println("if (!board.menuIsOpen) {");
	client.println("this.createMenu();");
	client.println("board.menuIsOpen = true;");
	client.println("} else if (board.menuIsOpen) {");
	client.println("this.hiddenMenu();");
	client.println("board.menuIsOpen = false;");
	client.println("}");
	client.println("});");
	client.println("}");
	client.println("// Menu options");
	client.println("options() {");
	client.println("const menu = document.getElementById('menu');");
	client.println("menu.innerHTML = `");
	client.println("<div id='close-menu'><i class='far fa-times-circle'></i></div>");
	client.println("<div class='menu-item' id='options'>Options</div>");
	client.println("`;");
	client.println("if (board.optionSound) {");
	client.println("menu.innerHTML += `<div class='submenu' id='sound'><span class='space'>Sound On/Off</span>");
	client.println("<label class='switch' id='sound-switch'>");
	client.println("<input type='checkbox' checked>");
	client.println("<span class='slider round'></span>");
	client.println("</label></div>`;");
	client.println("} else {");
	client.println("menu.innerHTML += `<div class='submenu' id='sound'><span class='space'>Sound On/Off</span>");
	client.println("<label class='switch' id='sound-switch'>");
	client.println("<input type='checkbox'>");
	client.println("<span class='slider round'></span>");
	client.println("</label></div>`;");
	client.println("}");
	client.println("if (board.optionHighlight) {");
	client.println("menu.innerHTML += `<div class='submenu' id='highlight'><span class='space-s'>Forced Highlight  </span>");
	client.println("<label class='switch' id='highlight-switch'>");
	client.println("<input type='checkbox' checked>");
	client.println("<span class='slider round'></span>");
	client.println("</label></div>`;");
	client.println("} else {");
	client.println("menu.innerHTML += `<div class='submenu' id='highlight'><span class='space-s'>Forced Highlight</span>");
	client.println("<label class='switch' id='highlight-switch'>");
	client.println("<input type='checkbox'>");
	client.println("<span class='slider round'></span>");
	client.println("</label></div>`;");
	client.println("}");
	client.println("menu.innerHTML += `<div class='submenu' id='back'><i class='fa fa-backward' aria-hidden='true'></i>");
	client.println("</div>`;");
	client.println("//check if sound switch is off");
	client.println("const switchSound = document.getElementById('sound-switch');");
	client.println("switchSound.addEventListener('change', () => {");
	client.println("if (board.optionSound) {");
	client.println("board.optionSound = false;");
	client.println("} else {");
	client.println("board.optionSound = true;");
	client.println("}");
	client.println("});");
	client.println("const switchHighlight = document.getElementById('highlight-switch');");
	client.println("switchHighlight.addEventListener('change', () => {");
	client.println("if (board.optionHighlight) {");
	client.println("board.optionHighlight = false;");
	client.println("} else {");
	client.println("board.optionHighlight = true;");
	client.println("}");
	client.println("});");
	client.println("// add event listeners");
	client.println("document.getElementById('close-menu').addEventListener('click', () => {");
	client.println("this.hiddenMenu();");
	client.println("board.menuIsOpen = false;");
	client.println("});");
	client.println("document.getElementById('back').addEventListener('click', () => {");
	client.println("this.clearMenu();");
	client.println("this.createMenu();");
	client.println("});");
	client.println("}");
	client.println("// Menu rules");
	client.println("rules() {");
	client.println("const menu = document.getElementById('menu');");
	client.println("menu.classList.add('menu-rules');");
	client.println("menu.innerHTML = `");
	client.println("<div id='close-menu'><i class='far fa-times-circle'></i></div>");
	client.println("<div class='menu-item new-page' id='options'>Rules</div>");
	client.println("<p class='text-g'>Simple move:</p>");
	client.println("<p>Moving a piece one square to the front, diagonally to an adjacent");
	client.println("unoccupied dark square.</p>");
	client.println("<p class='text-g'>Jump (take an opponent piece):</p><p>Jumping over an opponent's piece,");
	client.println("to an empty square immediately to the opposite square (forward only).");
	client.println("Jumping is always mandatory: if a player has the option to jump, they must take it.");
	client.println("If there are more pieces to be taken, they have to be taken.");
	client.println("Multiple jumps are mandatory if they can be made.");
	client.println("Multiple jumps are possible if, after one jump, another piece is immediately eligible to");
	client.println("be jumped by the moving piece, even if that jump is in a");
	client.println("different diagonal direction.");
	client.println("Kings</p><p class='text-g'>King:</p>");
	client.println("<p>If a piece moves into the last row, it gains the ability to move both forward and");
	client.println("backward. One square per turn.</p>");
	client.println("<p class='text-g'>End of game</p>");
	client.println("<p>A player wins by capturing all of the opponent's pieces or by leaving the opponent");
	client.println("with no legal move.");
	client.println("The game is a draw if neither side can force a win.");
	client.println("A draw will also occur after 30 moves made just by jungs without piece taking.</p>");
	client.println("<div class='submenu' id='rules-back'><i class='fa fa-backward' aria-hidden='true'></i></div>`;");
	client.println("// add event listeners");
	client.println("document.getElementById('close-menu').addEventListener('click', () => {");
	client.println("this.hiddenMenu();");
	client.println("board.menuIsOpen = false;");
	client.println("});");
	client.println("document.getElementById('rules-back').addEventListener('click', () => {");
	client.println("this.clearMenu();");
	client.println("this.createMenu();");
	client.println("});");
	client.println("}");
	client.println("// Menu results");
	client.println("results() {");
	client.println("const menu = document.getElementById('menu');");
	client.println("menu.classList.add('menu');");
	client.println("menu.innerHTML = `");
	client.println("<div id='close-menu'><i class='far fa-times-circle'></i></div>");
	client.println("<div class='menu-item new-page' id='results'>Results</div>`;");
	client.println("// add scores");
	client.println("let plyerScore = localStorage.getItem('whiteScore');");
	client.println("let computerScore = localStorage.getItem('blackScore');");
	client.println("menu.innerHTML += `<p class='submenu results-menu' id='player-score'>Player  ${plyerScore}</p>`;");
	client.println("menu.innerHTML += `<p class='submenu results-menu' id='computer-score'>Computer  ${computerScore}</p>`;");
	client.println("menu.innerHTML += `<div class='submenu results-menu' id='reset-score'>Reset Score</div>`;");
	client.println("menu.innerHTML += `<div class='submenu results-menu' id='rules-back'><i class='fa fa-backward' aria-hidden='true'></i></div>`;");
	client.println("// add event listeners");
	client.println("document.getElementById('close-menu').addEventListener('click', () => {");
	client.println("this.hiddenMenu();");
	client.println("board.menuIsOpen = false;");
	client.println("});");
	client.println("document.getElementById('rules-back').addEventListener('click', () => {");
	client.println("this.clearMenu();");
	client.println("this.createMenu();");
	client.println("});");
	client.println("document.getElementById('reset-score').addEventListener('click', () => {");
	client.println("localStorage.setItem('whiteScore', 0);");
	client.println("localStorage.setItem('blackScore', 0);");
	client.println("document.getElementById('player-score').innerHTML = 'Player 0';");
	client.println("document.getElementById('computer-score').innerHTML = 'Computer 0';");
	client.println("});");
	client.println("}");
	client.println("clearMenu() {");
	client.println("const game = document.getElementById('menu');");
	client.println("game.remove();");
	client.println("}");
	client.println("}");
	client.println("// Game menu");
	client.println("const board = new Board();");
	client.println("const menu = new Menu();");
	client.println("menu.createMenu();");
	client.println("</script>");
	client.println("<body>");
	client.println("<div id='center'>");
	client.println("<div id='removedb'></div>");
	client.println("<div id='game'></div>");
	client.println("<div id='removedw'></div>");
	client.println("<div id='messages'></div>");
	client.println("</div>");
	client.println("<script defer src='https://use.fontawesome.com/releases/v5.0.6/js/all.js'></script>");
	client.println("</body>");
	client.println("</html>");
}